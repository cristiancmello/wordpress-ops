service: station-orch

frameworkVersion: "=1.65.0"

plugins:
  - serverless-offline
  - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  environment:
    CDK_DEFAULT_STACK_NAME: StationStack
    CDK_DEFAULT_ACCOUNT: ${ssm:/station_orch/AWS_ACCOUNT~true}
    CDK_DEFAULT_REGION: ${ssm:/station_orch/AWS_REGION~true}
    OPS_ACCESS_KEY_ID: ${ssm:/station_orch/AWS_ACCESS_KEY_ID~true}
    OPS_SECRET_ACCESS_KEY: ${ssm:/station_orch/AWS_SECRET_ACCESS_KEY~true}
    OPS_AWS_REGION: ${ssm:/station_orch/AWS_REGION~true}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "*"
      Resource:
        - "*"

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  cdkDeploy:
    handler: functions/cdkDeploy.handler
    timeout: 900
  createUser:
    handler: functions/createUser.handler
    events:
      - http:
          path: users
          method: POST
  createStation:
    handler: functions/createStation.handler
    events:
      - http:
          path: stations
          method: POST
  startStationDeployment:
    handler: functions/startStationDeployment.handler
    events:
      - http:
          path: stations/deployments
          method: POST
          
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    users:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: users
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    stations:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: stations
        AttributeDefinitions:
          - AttributeName: randomString
            AttributeType: S
        KeySchema:
          - AttributeName: randomString
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    deployments:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: deployments
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    stationProfiles:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: stationProfiles
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true
